##########################################################################################
1) trainings, both PL and EN
javascript
ionic
python
Udemy, Erik/Tom
SkillWise
Pakg
PL - 
2) ionic - sport apps
3) external consulting agency
Salt - https://www.welovesalt.com/about/#services
X... - 
PentaConsulting.com
4) https://www.jagbc.com/
5) squash & tennis

##########################################################################################
Software (maybe with Ionic or Fuse):
- Screenshot software
	* multiple monitors
	* shortkeys
	* video / windows / regions
- Desktop manager
- Magic Pen - onscreen drawing
- Video Recording
	* camera - position, size
	* screen, windows
	* multiple screens (screen in screen, PIP)
	* formats (video, audio)
	* duration limit
- Tests 4 geeks (testing platform)
- Coding dojo platform
- ML Retreat (training f2f from ML, Python, Javascript, IONIC)
	For guys from US willing to get well paid job
- Freelancers portal () + tasks to work on real problems
- News reader with sentiment analysis, truthworthness, Poland and worldwide
- Car configuration (multicar), worth after several years, cost of the parts, dimenstions,
- Economy analysis - correlation between currencies, stocks (indexes total, 100etc), commodities (gold, crude oil, copper, etc), cryptocurrencies, ...
	Predict prices, economic growth,
	Predict house pricing, etc.
- 
	
##########################################################################################
https://www.udemy.com/reprogram-your-facebook-any-other-webapp/


flow:
1) table of contents
2) script / scenario
3) video recording
4) audio in US EN (with the script)
5) sync audio &  video
6) publish -> waiting for review udemy
7) approval
8) udemy : 3-50%
9) ads: FBs, YTs - social media
10) 


##########################################################################################
content:
1) javascript
2) python
3) ionic (mobile framework hybrid)
4) scrum, kanban - softskills
5) bash !


##########################################################################################
Zdazus:
aktywnych userów ok 4300, przy ponad 12k instalacji
ale instalacje zbierane od 3-4 lat
59k impressions -> 81 clicków -> 22.06zł-30
12 000 -> 59000 impressions -> 81 clicks -> 22 PLN / 5.9 USD (week => 168x more to get this in 1 hour)

1 click => 0,007USD

##########################################################################################

12,000 netto - OK 	-> 	144000 netto / year 	->	218,000 brutto / year B2B	->	59,000 USD
59,000 USD / 8760 h/year ->	6,7 USD hour = 25 PLN hour

10,500 netto - OK 	-> 	126000 netto / year 	-> 	191,000 brutto / year B2B
51,600 USD / 8760 h/year ->	5,9 USD hour = 22 PLN hour


1 click / 750 impressions

8760h / year (3 main timezones Asia-Pacific, Europe+Africa, Americas)

##########################################################################################
to have so many clicks per 1h (not per 1 week) app needs to have:
24*7 more installations and active users (168x) - seems possible. 500,000 for Zdazus -> 84,000,000 for 168x times => 88x times more in the world
168 x 4300 	->   722,000 active users
168 x 12000	-> 2,000,000 installations (per 4-5 applications -> 400-500,000 per app)


##########################################################################################
Videos - trainings
1-2 minute per video
Intro / jing / voice-over
Show how it looks full-swing / dynamic instructor / 
Step by step - instructor led
Show how it looks full-swing / dynamic trainee 
Ending, good-bye, advertisment


Text + links to apps + Disclaimer + channel link + subscribe


##########################################################################################
Guy from indonesia
40-45$ per hour

Working;
1) App development
170k PLN / year (1750h)

24hour - robotic :):
2) Trainings
60$ day 
60k PLN / year

3) Application
2$ / hour
64k PLN / year

##########################################################################################
140-150 PLN/h netto
##########################################################################################
Arla, TM/SM
225 x 8 x 145 PLN/h -> 
-ZUS
-19%
200,000 PLN year
##########################################################################################
200k$ / year
##########################################################################################
Role:
Crossover VP of engineering
5-15 engineering managers
Solve challenging software problems
Improve quality of the team's performance
Coaching low contributors -> replacing them with top global talent
Former developer/architect -> push towards high standards of technical excellence
Achieve quality bar

Monitoring team performance - crossover work ... tool
SM - identify obstacles/impediments, offer coaching to improve productivity
Run deep-dives into problem-solving
Levarage past technical expertise in software development, quality assurance, automated deployment in CI/CD tools
Quality Assurance experience - make it an advantage

Work with key executives within ESW Capital
Seasoned professional with excellent English communication skills
Effectively manage executive relationships

Report to SVP
Aggressive quarterly goals
Lead team towards achieving the goals

Responsibilities:
Drive weekly product releases - not act on the last day, have backup plan
Establish world-class standards, deliver consistent, high-quality product across dispersed teams - tools, communication, know the status, both current and expected in 2-3 days
Achieve world-class productivity

Scrum, Kanban? which? why?
Delivery performance - measure

Metrices:
Velocity / capacity - commited vs completed
Bugs per week - found / fixed
Quality debt
Burnup chart
Burndown chart
Sprint scope stability
Sprint plan change
Completion Ratio
Scope convertion
Unit testing coverage
Unit test success rate
Build success rate
Code quality
Technical debt
Bugs growth by week/sprint
Quality debt (defects): critical, major, minor, low,
Open bugs over time
Reopened defects
Invalid defects
Top priority defects age (fixed within 1 week, 2 weeks, > 2 weeks)
Metrices end:

Engage with customers and product managers / product owners to have consistent business value and need - product delivery is alligned with customer business value
Transform existing engineering teams into effective engineering functions - upgradeing and recognizing talent as / when? required

Strong recruitment mentoring, hands-on experience architectural leadership, career management - develop to leave, convince to stay, develop or die hard :) in 2-3 years skills may become outdated

Lead product technical due diligence (?) and engineering talent assessment in companies we're going to acquire
Transform acquired engineering teams into effective and efficient global teams - increase quality, reduce cost over pre-acquisition benchmarks,

Requirements:
MS/PhD required - checked
Minimum 15 ys of engineering experience - checked - since 2003
2 ys of experience as senior engineering manager - senior / 2nd level (regular, senior) - but in such large corporation there are 2 more levels (director, vp)
Minimum 5ys of development experience - C++/C# (not java) - checked
Led a team of 50 software engineers - not directly - up to 27/28 direct reporters + 15-20 (depending on project stage) developers/test engineers in 2 streams (SM+PM role)
Setting goals, performance measurment, hiring decisions, firing - no - only recommendation for "improvement plan" - final hiring decision is combined HR/PM/RM (combined decision)

Proven experience in building high-performance teams and scalable best-practices in engineering organization
	Agile, Scrum/Kanban (preferred) - 
	
Recent experience with DevOps teams
	AWS, Google Cloud
	Kubernetes - container-orchestration system for automating deployment, scaling and management of containerized applications (Google)
	Docker - container management tool
	DevOps - version control of all production artefacts, continuous integration, and deployment, to proactive monitoring of a production environment
	Orchestration - the planning or coordination of the elements of a situation to produce a desired effect, especially surreptitiously
	Orchestration - organizowanie
	
Proven ability to use metrics as key driver in decision-making
1 year of experience with IaaS, SaaS, PasS - services
Proven experience with setting goals for organization using SMART principles - https://en.wikipedia.org/wiki/SMART_criteria
Specific – target a specific area for improvement.
Measurable – quantify or at least suggest an indicator of progress.
Assignable – specify who will do it.
Realistic – state what results can realistically be achieved, given available resources.
Time-related – specify when the result(s) can be achieved.



##########################################################################################
Scaling
Standarization
Quarter 65 days (13 weeks x 5 days)

Acquire 50 companies a year
A lot of work
100$/h -> 200k$/year
Build and maintain crossover culture
Full time, 40h / week
Few managers reporting directly -> up to 15 reporting directly
10 -> hundreds in your responsibility
Deep dive into engineering problems

##########################################################################################
Curently
30 direct reporting employees in 3 sub-units - consulting/service/not a project
Handling a project with 25 people in it (3 sub streams, 8-9 developers/testers/business analysts/product owners)
So overall it's 6 units total: 3 service-like, 3 project
Total: about 55 engineers, 6 managers,

##########################################################################################
My approach to project development

Continous delivery
Static testing / code reviews
Unit testing 
Integration testing
System testing

Branching strategy
	Feature branching - SaaS worfklow
	Multiple version workflow (v1.2, v1.3, etc, bugfix)
	Gitflow - master, develop, feature X, feature Y
	
Git Workflow, 
Continous Delivery
Continous Integration
Master branch - tag releases
Develop branch -> release branch
Release branch -> master 
Hotfix branch - hotfix/bug -> master -> release
Feature branch -> develop branch
https://medium.com/devsondevs/gitflow-workflow-continuous-integration-continuous-delivery-7f4643abb64f 

Git pull request
Git merge request

Start with open-ended questions
IQ cover all answers

Go to cloud

	
##########################################################################################
IntelliTest
Generates unit tests for statemenst, conditions, assertions, ...
C#, .NET
xUnit, nUnit format
reSharper
Generate unit testing
What about generating functional system testing? MY IMPROVEMENT to the company

Bring:
Align with the culture - agile
Strong emphasis on tools - tools do not take breaks, do not get tired, work 24x7
Without tools there is too much manual work which is tiresome, involve mundane tasks
Review - tools
Unit testing - as much generation for both code and data - IntelliTest for VS or others for java, etc
	Java: Randoop, squaretest
	http://www.evosuite.org/
CI, CD - tools are important to shorthen test cycle, feedback cycle, atomization - one change at a time
Test automation (not unit) - https://www.ca.com/us/products/ca-agile-requirements-designer.html#
CA Agile requirements designer:
https://www.youtube.com/watch?v=yatWfyN3KR4
https://www.youtube.com/watch?v=l5KBbIN-afk
https://www.youtube.com/watch?v=VfA3Zb4xX7U&list=PLO7SodxCJyn4mqM5LSK4cU5Ra1KnTludw

Model based testing
Java, .NET/C#

Detects errors, antipatterns,
Planning, project management, 

No other committments, 100% fully available,
Starting from April,
Working with architects, Senior management, senior architects, development labs,
Learning, open to new technologies,

Technology, tools are very important (maybe contrary to agile manifesto - I value tools more than cooperation itself, although important).
Why? Imagine building software without a main tool - a compiler or IDE (although some silll work with vim :))
Tools for compilation, code review (reSharper), unit testing (generation, management), CI, deployment, DevOps tools (containters, Kubernetes, Docker, ...)

DevOps - https://www.chef.io/ansible/
Chef
Ansible

Metrics:
Bugs
Bugs resolved - bugfix
Average time to resolve bug
QA manual tests executed - 3408 (it has to be low cost)
Low automation ratio 
Reduce regression ratio


Monitor & control quarterly goals,
Work with senior managers, resoponsible for a team of software managers
Progress daily towards achieving quarterly goals.

Daily deep-dives into technical or process problems the teams are having,
Good technical background, resolve technical blockers when needed
Work to identify methods how to improve towards achieving your goals, increase productivity of teams, 
Process improvement, 
Resposibility for set of products, set of engineering teams,
